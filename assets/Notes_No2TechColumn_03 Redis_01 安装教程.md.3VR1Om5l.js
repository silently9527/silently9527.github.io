import{_ as e,c as s,o as a,aa as i}from"./chunks/framework.DOnJscRE.js";const b=JSON.parse('{"title":"01 Redis的安装教程","description":"","frontmatter":{"title":"01 Redis的安装教程","author":"Herman","updateTime":"2024-08-11 21:34","desc":"Redis的安装教程","categories":"中间件","tags":"Redis","outline":"deep"},"headers":[],"relativePath":"Notes/No2TechColumn/03 Redis/01 安装教程.md","filePath":"Notes/No2TechColumn/03 Redis/01 安装教程.md","lastUpdated":1761837638000}'),t={name:"Notes/No2TechColumn/03 Redis/01 安装教程.md"},n=i(`<h2 id="使用docker来安装redis" tabindex="-1">使用Docker来安装Redis <a class="header-anchor" href="#使用docker来安装redis" aria-label="Permalink to &quot;使用Docker来安装Redis&quot;">​</a></h2><h4 id="_1-使用docker最为简单-只需要执行以下命令即可" tabindex="-1">1. 使用Docker最为简单，只需要执行以下命令即可 <a class="header-anchor" href="#_1-使用docker最为简单-只需要执行以下命令即可" aria-label="Permalink to &quot;1. 使用Docker最为简单，只需要执行以下命令即可&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -p 7001:7001 --name redis -v /data/shell/redis/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span></span></code></pre></div><p>参数说明：</p><ul><li><code>-p 7001:7001</code>: 指定来redis的端口为7001，并且和主机的7001对应</li><li><code>/data/shell/redis/redis.conf</code>: 指定redis的启动配置文件，需要根据自己的情况修改实际的目录</li></ul><h4 id="_2-redis-conf的配置文件的下载地址-redis-conf" tabindex="-1">2. redis.conf的配置文件的下载地址 <a href="http://cdn.silently9527.cn/redis_1630239144896.conf" target="_blank" rel="noreferrer">redis.conf</a> <a class="header-anchor" href="#_2-redis-conf的配置文件的下载地址-redis-conf" aria-label="Permalink to &quot;2. redis.conf的配置文件的下载地址 [redis.conf](http://cdn.silently9527.cn/redis_1630239144896.conf)&quot;">​</a></h4><blockquote><p>注意：redis.conf中的 <code>requirepass</code>是redis的连接密码; redis.conf文件中的<code>port 7001</code>不要修改，如果想要修改需要保存和前面的启动脚步中的端口保持一直</p></blockquote><h2 id="使用源码安装redis" tabindex="-1">使用源码安装redis <a class="header-anchor" href="#使用源码安装redis" aria-label="Permalink to &quot;使用源码安装redis&quot;">​</a></h2><h4 id="_1-先去官方网站下载最新版本的redis-下载地址-拷贝下载地址后使用如下命令在服务器上下载文件" tabindex="-1">1. 先去官方网站下载最新版本的redis， <a href="https://redis.io/download" target="_blank" rel="noreferrer">下载地址</a>, 拷贝下载地址后使用如下命令在服务器上下载文件 <a class="header-anchor" href="#_1-先去官方网站下载最新版本的redis-下载地址-拷贝下载地址后使用如下命令在服务器上下载文件" aria-label="Permalink to &quot;1. 先去官方网站下载最新版本的redis， [下载地址](https://redis.io/download), 拷贝下载地址后使用如下命令在服务器上下载文件&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wget http://download.redis.io/releases/redis-6.0.8.tar.gz</span></span></code></pre></div><h4 id="_2-下载完成后解压文件到当前目录" tabindex="-1">2. 下载完成后解压文件到当前目录 <a class="header-anchor" href="#_2-下载完成后解压文件到当前目录" aria-label="Permalink to &quot;2. 下载完成后解压文件到当前目录&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tar -zxvf redis-6.0.8.tar.gz</span></span></code></pre></div><h4 id="_3-编译-安装redis" tabindex="-1">3. 编译&amp;安装redis <a class="header-anchor" href="#_3-编译-安装redis" aria-label="Permalink to &quot;3. 编译&amp;安装redis&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd /Users/Silently9527/Documents/redis/redis-6.0.8</span></span>
<span class="line"><span>make</span></span>
<span class="line"><span>make install PREFIX=/Users/Silently9527/Documents/redis　# 指定redis的安装目录</span></span></code></pre></div><p>如果在安装的过程中提示找不到 gcc；执行如下命令安装gcc++</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yum install gcc-c++</span></span>
<span class="line"><span>yum -y install centos-release-scl</span></span>
<span class="line"><span>yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span></span></code></pre></div><p>最后编译安装完成后的目录结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drwxr-xr-x   8 herman  staff      256  8 29 20:27 bin</span></span>
<span class="line"><span>drwxr-xr-x@ 23 herman  staff      736  9 10  2020 redis-6.0.8</span></span>
<span class="line"><span>-rw-r--r--@  1 herman  staff  2247528  8 29 20:17 redis-6.0.8.tar.gz</span></span></code></pre></div><h4 id="_4-拷贝redis-conf到bin目录中" tabindex="-1">4. 拷贝redis.conf到bin目录中 <a class="header-anchor" href="#_4-拷贝redis-conf到bin目录中" aria-label="Permalink to &quot;4. 拷贝redis.conf到bin目录中&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cp redis-6.0.8/redis.conf bin</span></span></code></pre></div><h4 id="_5-启动redis" tabindex="-1">5. 启动redis <a class="header-anchor" href="#_5-启动redis" aria-label="Permalink to &quot;5. 启动redis&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd bin</span></span>
<span class="line"><span>redis-server redis.conf</span></span></code></pre></div><p>当看到如下界面就表示启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/silently9527/images/008i3skNgy1gtxxr1rmg0j61j00o4dk402.jpg" alt=""></p><h2 id="使用客户端程序连接到redis服务器" tabindex="-1">使用客户端程序连接到redis服务器 <a class="header-anchor" href="#使用客户端程序连接到redis服务器" aria-label="Permalink to &quot;使用客户端程序连接到redis服务器&quot;">​</a></h2><p>我们需要再次进入到bin目录下，可以看到有个文件redis-cli，这就是我们编译出来的客户端程序，使用如下命令连接：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redis-cli -h localhost -p 6379</span></span></code></pre></div><p>如果我们在redis.conf中有设置密码(默认是没有设置密码的)，虽然能够连接成功，但依然不会使用redis的命令，比如</p><p><img src="https://cdn.jsdelivr.net/gh/silently9527/images/008i3skNgy1gtxxzoqyt2j60lq05idg802.jpg" alt=""></p><p>这时候需要我们通过如下命令认证：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AUTH 123456</span></span></code></pre></div><h2 id="后台启动redis服务器" tabindex="-1">后台启动redis服务器 <a class="header-anchor" href="#后台启动redis服务器" aria-label="Permalink to &quot;后台启动redis服务器&quot;">​</a></h2><p>上面我们虽然启动来redis，但是如果把当前窗口关闭，redis也会被关闭，如果才能让redis后台启动呢？</p><p>十分的简单，把redis.conf中的配置项 <code>daemonize</code> 改为 yes</p><p><img src="https://cdn.jsdelivr.net/gh/silently9527/images/008i3skNgy1gtxy6kb07xj612i06odh002.jpg" alt=""></p><p>修改完成之后在重启redis</p><h2 id="关闭redis" tabindex="-1">关闭redis <a class="header-anchor" href="#关闭redis" aria-label="Permalink to &quot;关闭redis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pkill redis</span></span></code></pre></div><p>千万不要使用 <code>kill -9</code>，有可能使用数据丢失</p><p>也可以通过客户端连接工具，连接上之后使用shutdown命令</p><p><img src="https://cdn.jsdelivr.net/gh/silently9527/images/008i3skNgy1gtxybnouqhj60hc09s0tf02.jpg" alt=""></p>`,41),d=[n];function r(l,o,p,c,h,g){return a(),s("div",null,d)}const m=e(t,[["render",r]]);export{b as __pageData,m as default};
