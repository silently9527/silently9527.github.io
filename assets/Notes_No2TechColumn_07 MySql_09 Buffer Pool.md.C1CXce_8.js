import{_ as e,c as o,o as l,aa as a}from"./chunks/framework.DOnJscRE.js";const b=JSON.parse('{"title":"09 Buffer Pool","description":"","frontmatter":{"title":"09 Buffer Pool","author":"Herman","updateTime":"2024-08-11 21:34","desc":"Buffer Pool","categories":"中间件","tags":"MySQL/InnoDB/B+树索引/Buffer Pool","outline":"deep"},"headers":[],"relativePath":"Notes/No2TechColumn/07 MySql/09 Buffer Pool.md","filePath":"Notes/No2TechColumn/07 MySql/09 Buffer Pool.md","lastUpdated":1761665241000}'),s={name:"Notes/No2TechColumn/07 MySql/09 Buffer Pool.md"},i=a('<h3 id="bufferpool-是什么" tabindex="-1">BufferPool 是什么 <a class="header-anchor" href="#bufferpool-是什么" aria-label="Permalink to &quot;BufferPool 是什么&quot;">​</a></h3><p>为了缓冲磁盘中的页，Mysql启动的时候就向操作系统申请了一片连续的内存，这片内存就是BufferPool(缓冲区)。可以在启动服务之前配置 启动参数 <code>buffer_pool_size</code>， 注意这个参数的单位是字节，bufferPool最小值是5MB</p><p>BufferPool对应的内存被划分为了若干个页面，页面大小和表空间中的页面大小一样16KB，为了把这两个页区分开来，我们就把BufferPool中的页称为缓冲页。 为了更好的管理这些缓冲页，又设计了控制块，包含了缓冲页所属的表空间编号，页号，缓冲页在BufferPool中的地址等等。每个控制块与缓冲页一一对应，他们都存放在BufferPool中， 控制块放在了前面，缓冲页放在后面</p><p><img src="https://cdn.jsdelivr.net/gh/silently9527/images//202510282007731.png" alt=""></p><h3 id="free链" tabindex="-1">free链 <a class="header-anchor" href="#free链" aria-label="Permalink to &quot;free链&quot;">​</a></h3><p>在Mysql启动服务器的时候，BufferPool会申请一片空间划分为若干个控制块和缓冲页，但是并没有加载真实的磁盘页到内存中。</p><p>当mysql运行起来开始加载磁盘页到内存中时，如何知道哪些缓冲页时空闲的呢？ 我们可以把空闲缓冲页的控制块作为一个节点放到一个链表中，这个链表可以称为 free链.</p><h3 id="缓冲页的哈希处理" tabindex="-1">缓冲页的哈希处理 <a class="header-anchor" href="#缓冲页的哈希处理" aria-label="Permalink to &quot;缓冲页的哈希处理&quot;">​</a></h3><p>再来考虑个问题，如何判断磁盘中的页面是否已经被加载到BufferPool中呢？ Mysql在这里使用到了哈希表，把表空间号+页号作为Key，缓冲页的控制块就是对应的value</p><h3 id="flush链" tabindex="-1">flush链 <a class="header-anchor" href="#flush链" aria-label="Permalink to &quot;flush链&quot;">​</a></h3><p>当我们修改BufferPool中的缓冲页的数据时，它就和磁盘中的页不一致了，这被称为脏页。如果每次我们修改了数据就直接刷新到磁盘上去，这样太频繁了，耗性能，所以Mysql定义了flush链。 修改了缓冲页面后不着急去刷新到磁盘，而是把脏页用链表串联起来，等在某个时间点再去刷新。</p><h3 id="lru-链" tabindex="-1">LRU 链 <a class="header-anchor" href="#lru-链" aria-label="Permalink to &quot;LRU 链&quot;">​</a></h3><p>BufferPool的内存大小是有限，如果BufferPool中的空间已经使用完了，在加载新的页面到内存时就需要把旧的页面给移除，那么到底该移除哪些页面呢？</p><p>我们可以创建一条LRU链表，当我们需要访问一个页面的时候，可以按照下面的方法处理LRU链表：</p><ul><li>如果该页面不在BufferPool中，就把页面加载BufferPool中，然后再把缓冲页面对应的控制块放到LRU链表的头部</li><li>如果该页面在BufferPool中，则直接把该缓冲页对应的控制块信息放入到链表的头部</li></ul><p>所以当需要淘汰缓冲页面的时候，就直接淘汰掉链表的尾部。</p><p>以上只是简单理解LRU的机制，实际上Mysql使用的LRU 链更加复杂，采用了划分区域的LRU链表，主要是为了解决一下问题：</p><ul><li>Innodb提供了 预读 功能，这会让mysql提前读取一些磁盘页面到内存中，而是可能用不上</li><li>有可能会执行全表扫描的语句，短时间内访问了大量使用频率很低的页面，这会导致加载很多页面可能只会使用一次就不再使用而淘汰了一些热点数据</li></ul><p>所以LRU链表被划分为了两段：一部分用来存储热点数据(young)，一部分用来存放冷数据(old)。 mysql是通过比例来划分的链表，查看当前系统设置的比例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_old_blocks_pct&#39;</span></span></code></pre></div><p>默认情况下，old区域占用的比例是37%，</p><p>有了这两个区域，那么针对上面的两个情况进行优化</p><ul><li>预读：当磁盘页初次加载到内存的时候就放入到 old 区域的头部，这样如果用不到就会被逐渐淘汰</li><li>全表扫描：当磁盘页面初次加载到内存的时候放到 old 区域的头部，在第一次访问的时间在控制块记录一个时间， 如果后续的访问时间与第一次访问时间在某个时间间隔内，就不移动缓冲页面到young区域。</li></ul><h3 id="刷新脏页到磁盘" tabindex="-1">刷新脏页到磁盘 <a class="header-anchor" href="#刷新脏页到磁盘" aria-label="Permalink to &quot;刷新脏页到磁盘&quot;">​</a></h3><p>后台有专门的线程负责每隔一段时间就把脏页面刷新到磁盘，刷新的缓冲页来源：</p><ul><li>从LRU链表的冷数据中刷新一部分页面到磁盘</li><li>从flush链表中刷新一部分页面到磁盘</li></ul><h3 id="多个bufferpool实例" tabindex="-1">多个BufferPool实例 <a class="header-anchor" href="#多个bufferpool实例" aria-label="Permalink to &quot;多个BufferPool实例&quot;">​</a></h3><p>BufferPool本质是系统的一片连续的内存区域，在多线程的环境下，访问BufferPool都是需要加锁处理，在并发访问比较高的时间，单个BufferPool可能会有性能瓶颈， 所以mysql允许配置多个BufferPool，修改启动参数：<code>innodb_buffer_instances</code></p><p>计算每个BufferPool占用多少内存空间：<code>innodb_buffer_buffer_size / innodb_buffer_instances</code>, 所以 <code>innodb_buffer_buffer_size</code> 配置的值是所有BufferPool总共的内存空间</p><p>当 innodb_buffer_buffer_size 的值小于 1G 时，设置BufferPool的实例个数是无效的，都会被设置成 1</p><p>查询BufferPool的状态信息：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show engine innodb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span></span></code></pre></div><p>原文链接: <a href="http://herman7z.site" target="_blank" rel="noreferrer">http://herman7z.site</a></p>',33),r=[i];function t(f,n,u,p,h,d){return l(),o("div",null,r)}const _=e(s,[["render",t]]);export{b as __pageData,_ as default};
