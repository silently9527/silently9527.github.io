import{_ as a,c as s,o as n,aa as e}from"./chunks/framework.DOnJscRE.js";const b=JSON.parse('{"title":"02 函数","description":"","frontmatter":{"title":"02 函数","author":"Herman","updateTime":"2024-09-11 21:34","desc":"Kotlin 基础入门","categories":"Kotlin","tags":"Kotlin","outline":"deep"},"headers":[],"relativePath":"Notes/No2TechColumn/06 Kotlin/02 函数.md","filePath":"Notes/No2TechColumn/06 Kotlin/02 函数.md","lastUpdated":1761052119000}'),p={name:"Notes/No2TechColumn/06 Kotlin/02 函数.md"},t=e(`<h4 id="定义函数" tabindex="-1">定义函数 <a class="header-anchor" href="#定义函数" aria-label="Permalink to &quot;定义函数&quot;">​</a></h4><p>在上一节中其实已经使用到了函数,这里来正式看看Kotlin中定义一个函数,包含返回类,以及参数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun max(a: Int, b: Int): Int {</span></span>
<span class="line"><span>    return if (a &gt; b) a else b;</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>注意，max方法中的if没有使用return,这需要提一下,Kotlin中的if是表达式,有返回值，默认表达式的最后一行就是返回值； try-catch也是表达式,例子在上一节中已经展示了</p></blockquote><p>Kotlin没有再新写集合类,依旧使用的是Java的集合类,只是对Java的集合类进行了增强,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun testFun() {</span></span>
<span class="line"><span>    val siteInfo = listOf(&quot;Herman&quot;, &quot;http://herman7z.site&quot;)</span></span>
<span class="line"><span>    println(siteInfo)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/silently9527/images/main/202408162107863.png" alt=""></p><blockquote><p>listOf方法就是Kotlin的增强,具体如何实现的后面在来看, kotlin也对不同类型的集合实现了toString, 输出更能够看的懂</p></blockquote><h4 id="命名参数、默认值参数" tabindex="-1">命名参数、默认值参数 <a class="header-anchor" href="#命名参数、默认值参数" aria-label="Permalink to &quot;命名参数、默认值参数&quot;">​</a></h4><p>对上面的函数testFun添加两个参数, 代码如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun testFun(a: String = &quot;None&quot;, b: String = &quot;None&quot;) {</span></span>
<span class="line"><span>    val siteInfo = listOf(&quot;Herman&quot;, &quot;http://herman7z.site&quot;, a, b)</span></span>
<span class="line"><span>    println(siteInfo)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在Java中是不能够给函数的参数指定默认值的, Kotlin实现了这点, 上面的函数a、b如果在调用方没有传入参数时就使用默认值</p><p>接下来我们看看调用这个函数</p><ol><li>由于有默认值,所以我们可以不需要传入参数 <code>testFun()</code> 输出的结果:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Herman, http://herman7z.site, None, None]</span></span></code></pre></div><ol start="2"><li>常规方式调用必须按照参数的顺序 <code> testFun(&quot;aaa&quot;, &quot;bbb&quot;)</code></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Herman, http://herman7z.site, aaa, bbb]</span></span></code></pre></div><ol start="3"><li>可以指定给某个参数赋值,比如 <code>testFun(b = &quot;123&quot;)</code></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Herman, http://herman7z.site, None, 123]</span></span></code></pre></div><blockquote><p>注意:参数的默认值是被编译到被调用的函数中的,而不是调用方.</p></blockquote><h4 id="顶层函数" tabindex="-1">顶层函数 <a class="header-anchor" href="#顶层函数" aria-label="Permalink to &quot;顶层函数&quot;">​</a></h4><p>Java是面向对象的语言,所有的方法都必须存在在某个类中作为成员方法,但是在实际的使用过程中会发现有些方法不适合作为任何类的成员方法,所以才有了很多的Utils</p><p>在Kotlin中可以不再需要使用Utils, 可以把这些函数直接放在代码文件(文件名:Chapter02.kt)的顶层, 如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class Chapter02 {</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun testFun(a: String = &quot;None&quot;, b: String = &quot;None&quot;) {</span></span>
<span class="line"><span>    val siteInfo = listOf(&quot;Herman&quot;, &quot;http://herman7z.site&quot;, a, b)</span></span>
<span class="line"><span>    println(siteInfo)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在实际编译后会更具文件名称生产一个Java类 <code>Chapter02Kt</code>, 其中<code>testFun</code>会被编译出这个Java类的静态方法, 所以如果在Java类中需要调用Kotlin的Chapter02</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>public class Test {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        Chapter02Kt.testFun(&quot;aaa&quot;,&quot;bbb&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="顶层属性" tabindex="-1">顶层属性 <a class="header-anchor" href="#顶层属性" aria-label="Permalink to &quot;顶层属性&quot;">​</a></h4><p>与函数一样,属性也可以放在顶层,最终也会被编译成类的静态属性, 如果属性使用的<code>val</code>那么就只有一个getter方法, 如果使用的<code>var</code>就会有getter、setter;</p><p>在Java中使用<code>public static final</code>来定义一个常量, Kotlin中使用 <code>const</code>来实现</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const val HERMAN_BLOG = &quot;http://herman7z.site&quot;</span></span>
<span class="line"><span>class Chapter02 {</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在Java中调用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Test {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        System.out.println(Chapter02Kt.HERMAN_BLOG);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="扩展函数" tabindex="-1">扩展函数 <a class="header-anchor" href="#扩展函数" aria-label="Permalink to &quot;扩展函数&quot;">​</a></h4><p>Kotlin的另一个特点就是可以给现有的类创建扩展函数和属性,无需修改原来的类,这里我们定一个类Chapter02</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class Chapter02 {</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>然后我们通过扩展函数的方式来给Chapter02添加一个<code>getAddress</code>方法</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun Chapter02.getAddress():String =&quot;http://herman7z.site&quot;</span></span></code></pre></div><p>这里可以看到扩展函数和普通函数的定义唯一不同就是多了个前缀<code>Chapter02</code>,指定是给哪个类添加扩展函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun main() {</span></span>
<span class="line"><span>   println(Chapter02().getAddress())</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>接下来把这个例子在稍微改动一点点,我们在<code>Chapter02</code>类中添加一个方法<code>buildAddress</code>, 然后在扩展函数中可以使用<code>this</code>直接调用这个方法,所以扩展函数可以使用<code>this</code>来引用类的原来的属性或者方法.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class Chapter02 {</span></span>
<span class="line"><span>    fun buildAddress(): String {</span></span>
<span class="line"><span>        return &quot;http://herman7z.site&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun Chapter02.getAddress(): String = this.buildAddress();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun main() {</span></span>
<span class="line"><span>    println(Chapter02().getAddress())</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>注意:</p><ol><li>扩展函数不能够引用类的私有和受保护的成员</li><li>扩展函数是Kotlin提供的高级语法糖,实质上扩展函数会被编译成Java类的静态函数,他会把调用对象作为静态函数第一个参数;所以如果在Java中调用扩展函数需要把目标对象传入到静态函数</li><li>扩展函数的静态性质导致扩展函数是不能够被继承, 不能够被重写</li></ol></blockquote><p>对于我们定义的扩展函数,Kotlin不会自动全局导入,需要我们在使用的时候导入</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import org.herman.kotlin.getAddress</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun main() {</span></span>
<span class="line"><span>    Chapter02().getAddress()</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>由于项目会定义很多扩展函数,所以可能会出现命名冲突,出现这种情况的时候可以是用 <code>as</code> 关键字</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import org.herman.kotlin.getAddress as addr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun main() {</span></span>
<span class="line"><span>    Chapter02().addr()</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="扩展属性" tabindex="-1">扩展属性 <a class="header-anchor" href="#扩展属性" aria-label="Permalink to &quot;扩展属性&quot;">​</a></h4><p>扩展属性可以为现有的类添加属性, 使用的属性语法来访问, 尽管被称为属性,但是不会有任何状态,不会初始值,因为静态的性质,没有合适的地方来存储值.</p><p>依旧是对Chapter02类进行扩展, 在使用时与访问普通属性没有区别</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>val Chapter02.name: String</span></span>
<span class="line"><span>    get() = &quot;Herman&quot;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>fun main() {</span></span>
<span class="line"><span>    println(Chapter02().name)</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="可变参数" tabindex="-1">可变参数 <a class="header-anchor" href="#可变参数" aria-label="Permalink to &quot;可变参数&quot;">​</a></h4><p>函数的参数可以是任意个数, 使用关键字<code>vararg</code>, 来看看kotlin库函数listOf如何使用的可变参数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public fun &lt;T&gt; listOf(vararg elements: T): List&lt;T&gt; = if (elements.size &gt; 0) elements.asList() else emptyList()</span></span></code></pre></div><p>使用的方式很简单</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fun main(args: Array&lt;String&gt;) {</span></span>
<span class="line"><span>    val col = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, *args)</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>这里使用了展开运算符<code>*</code>, 这个功能Java没有</p></blockquote><h4 id="中辍调用" tabindex="-1">中辍调用 <a class="header-anchor" href="#中辍调用" aria-label="Permalink to &quot;中辍调用&quot;">​</a></h4><p>在中辍调用中,没有添加额外的分隔符,函数名后面直接给参数,什么的函数需要使用关键字<code>infix</code>修饰</p><p>我们先来给Int类添加一个扩展函数<code>add</code>, 使用关键字<code>infix</code>修饰这个函数使之支持中辍调用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>infix fun Int.add(value: Int): Int = this.plus(value)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun main() {</span></span>
<span class="line"><span>    println(10.add(5)) //普通调用</span></span>
<span class="line"><span>    println(10 add 5) //中辍调用</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="局部函数" tabindex="-1">局部函数 <a class="header-anchor" href="#局部函数" aria-label="Permalink to &quot;局部函数&quot;">​</a></h4><p>在Java类中,可以抽离很多的小的函数,但是可能这些函数的作用域可以更小, 在Kotlin中就可以使用局部函数来处理</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class User(val name: String, val address: String)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun save(user: User) {</span></span>
<span class="line"><span>    fun validate(value: String, field: String) {</span></span>
<span class="line"><span>        if (Objects.isNull(value) || value.isEmpty()) {</span></span>
<span class="line"><span>            throw IllegalArgumentException(&quot;$field can not empty&quot;)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    validate(user.name,&quot;name&quot;)</span></span>
<span class="line"><span>    validate(user.address,&quot;address&quot;)</span></span>
<span class="line"><span>    //save user</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在这个例子中<code>validate</code>就是一个局部函数,作用域只在save方法中; 如果使用Java来实现<code>validate</code>函数就只能放到类级别,与save同级, 但是这个<code>validate</code>方法只会save方法调用,就放大了函数的作用域</p><p>原文链接: <a href="http://herman7z.site" target="_blank" rel="noreferrer">http://herman7z.site</a></p>`,65),i=[t];function l(o,c,d,r,h,u){return n(),s("div",null,i)}const v=a(p,[["render",l]]);export{b as __pageData,v as default};
